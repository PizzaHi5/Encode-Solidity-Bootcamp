Lesson 14 - Lottery Game
Instructions
Aim
The aim of the game is to get to the top of the leaderboard, so get as high a score as you
can, and make sure the other teams get a low score.
Playing the game
. Talk to your team mates and chose a team name
. Ensure your team has some Rinkeby ether, you will need about 0.5 ETH
If you need some ETH, go to Faucet or ask on sli.do
. You will need to have metamask installed
. Go to the game website : https://lottery.extropy.live/
5. Register your team, you need
A team name
Your wallet address
A password
To register your team, you will need to pass in some ETH.
Your team should now appear on the leader board
You can now play the game
5. Make a guess at the random number, you need to enter
Your teams address
Your guess at the random number (it is a small number < 50)
If you guess correctly you will get points, otherwise you will lose points
You will see that the contract has some ether, an additional challenge is to see if you can
drain the contract.
Contract code
These gists Lottery Oracle have the contract code
Read through the code and think how you can exploit it.

- Contract Address on Goerli Testnet: 0x44962eca0915Debe5B6Bb488dBE54A56D6C7935A
- Looking at the input parameters in the constructor of this contract 
(the contract creation transaction logs), I found the
Oracle Contract here: 0x0d186F6b68a95B3f575177b75c4144A941bFC4f3



Summary
- There were many exploits in this contract. One major exploit my team and I found was due to
this contract being written before 0.8.0. Using the -1 point deduction in makeAGuess(), its 
possible to underflow the point uint256. We purposely guessed wrong to underflow and get cap value.

- With cap points, the contained ETH in contract was retrieved with payoutWinningTeam();

- It was also possible to figure out the getRandomNumber() from the Oracle contract. Its a mod of seed
which is a public changeable value with reset(). We calculated the winning lottery number by 
looking at the current block of Goerli + 7days and modding it by seed which was set at contract creation.

- The contract was reloaded with 5 ETH after this. 

-I tried researching into the private keys of the admin addresses. Since the contract creators 
possibly used default addresses provided during contract creation locally, those addresses 
could have been used here. This means that googling the private keys of these admin addresses
is worth trying out. Turns out this was indeed possible. 

