Homework 21
Interacting with DeFi continued
. Continuing from homework 20, use your unit test as a basis to write a program to
interact with Uniswap.
2. Is it better to do one large trade or split it into two smaller trades in terms of the costs
involved ?

- Wrote a test script from the Unit tests in Hw20 that the test contract calls.

- I got Uniswap Factory off etherscan and tried to call its getPool function using IUniswapV3Factory.
    With the correct fee, dai, and busd addresses, this should return the pool address I need to get
    the current market price using IUniswapV3PoolState(pool).slot0() to make a swap. Everything
    compiles correctly however when I test, EVM fails. I suspect it has something to do with the ABIs
    for those addresses? I commented it out to try to make things simpler. 

- I figured out how to specify my rpc url in the foundry.toml. Now I should be able to execute functions
    on my forked mainnet from the addresses I have provided with 'forge test' instead of using anvil and cast. 
    Got interesting errors:
    Assertion Failed and Transaction too old

- Figured out the 'transaction too old' error comes from File 7 of 34 : PeripheryValidation.sol, my deadline
    needs to be increased. 99999999 is not enough. Wrote unchecked function that returns maxUint256 value.

- Got a STF error from testMakeAUSDCSwap meaning the USDC transfer failed, the testMakeABUSDSwap is EVM erroring
    File 28 of 34 : TransferHelper.sol

- Figured out the Assertion Failed errors. The address calls were failing.

- Changed the router calls form abi.encodeWithSignature to abi.encodeWithSelector using the method signature on
    etherscan. Got different results.

- forge test -vvv helped some to debug this mess. Seems I am calling exactInputSingle incorrectly and the
    msg.sender does not have any dai or usdc

- I have spent a ton of hours trying to figure this out. Proud of myself for where I got :)

Several Days Later
- I GOT HELP! :D
- Met with Rod and Sanji with SideKik using their product to help solve my problems!
    https://app.sidekik.xyz/

- Process
    Pulled up reference documentation:
    https://docs.sidekik.xyz/setup/overview/how-to-save-contract-addresses-to-disk/foundry
    Followed the reference documents above for the beginning

    Started up my local chain with anvil --rpc-url <url>
    SideKik connects to the local network via Microsoft Edge browser
    For deploying local contracts, ran:

    forge create --rpc-url http://127.0.0.1:8545 InteractWithUniswap --unlocked --from 
    0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266 --json > InteractWithUniswap.json

    InteractWithUniswap is my contract in BootcampHW21 and the address is from Foundry documentation
    https://book.getfoundry.sh/forge/cheatcodes
    This process created some json files

    Deploying made it available for SideKik to pick up. Following SideKik UI, I manually entered the
    contracts for DAI, Binance, BUSD, USDC, and the Router getting the ABIs off etherscan. I impersonated
    binance thru the top drop down by putting in their address. I also entered the InteractWithUniswap
    by uploading the file and copy/pasting the ABI from the 'out' folder in foundry.

    This gave me access to see all the functions available on all these contracts and allowed me to send
    transactions using my own InteractWithUniswap contract (for this HW) as well as the contracts themselves 
    directly through a nice UI. This made it far easier to debug all the problems I was running into. 

    Succeeded in executing a transaction! :)