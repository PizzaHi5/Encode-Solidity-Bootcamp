{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "startPayout",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "addPlayer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_winner",
          "type": "address"
        }
      ],
      "name": "addWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPrize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "payWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winners",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b50604051806040016040528060078152602001662237b3a1b7b4b760c91b81525060405180604001604052806003815260200162444f4760e81b81525081600390816200005f91906200011c565b5060046200006e82826200011c565b505050620001e8565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000a257607f821691505b602082108103620000c357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011757600081815260208120601f850160051c81016020861015620000f25750805b601f850160051c820191505b818110156200011357828155600101620000fe565b5050505b505050565b81516001600160401b0381111562000138576200013862000077565b62000150816200014984546200008d565b84620000c9565b602080601f8311600181146200018857600084156200016f5750858301515b600019600386901b1c1916600185901b17855562000113565b600085815260208120601f198616915b82811015620001b95788860151825594840194600190910190840162000198565b5085821015620001d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610c6a80620001f86000396000f3fe6080604052600436106101145760003560e01c806370a08231116100a0578063a9059cbb11610064578063a9059cbb1461034c578063b1275f9a1461036c578063c42b42a01461037f578063dd62ed3e14610395578063f71d96cb146103b557600080fd5b806370a082311461028957806386e34bc1146102bf57806395d89b41146102df578063a2fb1175146102f4578063a457c2d71461032c57600080fd5b8063297f407b116100e7578063297f407b146101b3578063313ce56714610222578063395093511461023e57806349a2aaca1461025e57806363bd1d4a1461027457600080fd5b806306fdde0314610119578063095ea7b31461014457806318160ddd1461017457806323b872dd14610193575b600080fd5b34801561012557600080fd5b5061012e6103d5565b60405161013b9190610a3a565b60405180910390f35b34801561015057600080fd5b5061016461015f366004610a9d565b610467565b604051901515815260200161013b565b34801561018057600080fd5b506002545b60405190815260200161013b565b34801561019f57600080fd5b506101646101ae366004610ac9565b610481565b3480156101bf57600080fd5b506102206101ce366004610b0a565b600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0392909216919091179055565b005b34801561022e57600080fd5b506040516012815260200161013b565b34801561024a57600080fd5b50610164610259366004610a9d565b6104a5565b34801561026a57600080fd5b5061018560065481565b34801561028057600080fd5b506102206104c7565b34801561029557600080fd5b506101856102a4366004610b0a565b6001600160a01b031660009081526020819052604090205490565b3480156102cb57600080fd5b506102206102da366004610b2e565b6104f0565b3480156102eb57600080fd5b5061012e610556565b34801561030057600080fd5b5061031461030f366004610b2e565b610565565b6040516001600160a01b03909116815260200161013b565b34801561033857600080fd5b50610164610347366004610a9d565b61058f565b34801561035857600080fd5b50610164610367366004610a9d565b61060f565b61022061037a366004610b0a565b61061d565b34801561038b57600080fd5b5061018560055481565b3480156103a157600080fd5b506101856103b0366004610b47565b6106bd565b3480156103c157600080fd5b506103146103d0366004610b2e565b6106e8565b6060600380546103e490610b80565b80601f016020809104026020016040519081016040528092919081815260200182805461041090610b80565b801561045d5780601f106104325761010080835404028352916020019161045d565b820191906000526020600020905b81548152906001019060200180831161044057829003601f168201915b5050505050905090565b6000336104758185856106f8565b60019150505b92915050565b60003361048f85828561081c565b61049a858585610896565b506001949350505050565b6000336104758185856104b883836106bd565b6104c29190610bd0565b6106f8565b476064036104ee576008546000906104e190606490610be3565b90506104ec816104f0565b505b565b60005b6008548111610552576008818154811061050f5761050f610c05565b60009182526020822001546040516001600160a01b039091169184156108fc02918591818181858888f1935050505050808061054a90610c1b565b9150506104f3565b5050565b6060600480546103e490610b80565b6008818154811061057557600080fd5b6000918252602090912001546001600160a01b0316905081565b6000338161059d82866106bd565b9050838110156106025760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61049a82868684036106f8565b600033610475818585610896565b3460010361067157600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0383161790555b6006805490600061068183610c1b565b919050555060c860065411156104ec576040517fd8e8545d90a0fc949f9fa79975953750d664b3eb37074e23a481d15736e7727a90600090a150565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6007818154811061057557600080fd5b6001600160a01b03831661075a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105f9565b6001600160a01b0382166107bb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105f9565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061082884846106bd565b9050600019811461089057818110156108835760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105f9565b61089084848484036106f8565b50505050565b6001600160a01b0383166108fa5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105f9565b6001600160a01b03821661095c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105f9565b6001600160a01b038316600090815260208190526040902054818110156109d45760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105f9565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610890565b600060208083528351808285015260005b81811015610a6757858101830151858201604001528201610a4b565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146104ec57600080fd5b60008060408385031215610ab057600080fd5b8235610abb81610a88565b946020939093013593505050565b600080600060608486031215610ade57600080fd5b8335610ae981610a88565b92506020840135610af981610a88565b929592945050506040919091013590565b600060208284031215610b1c57600080fd5b8135610b2781610a88565b9392505050565b600060208284031215610b4057600080fd5b5035919050565b60008060408385031215610b5a57600080fd5b8235610b6581610a88565b91506020830135610b7581610a88565b809150509250929050565b600181811c90821680610b9457607f821691505b602082108103610bb457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561047b5761047b610bba565b600082610c0057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060018201610c2d57610c2d610bba565b506001019056fea2646970667358221220d8847eede194a08e903933204da503e6d30252285fcd1b01ba4be6c086c723a864736f6c63430008110033",
    "sourceMap": "208:2463:9:-:0;;;534:40;;;;;;;;;;1976:113:1;;;;;;;;;;;;;-1:-1:-1;;;1976:113:1;;;;;;;;;;;;;;;;-1:-1:-1;;;1976:113:1;;;2050:5;2042;:13;;;;;;:::i;:::-;-1:-1:-1;2065:7:1;:17;2075:7;2065;:17;:::i;:::-;;1976:113;;208:2463:9;;14:127:11;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:545::-;759:2;754:3;751:11;748:448;;;795:1;820:5;816:2;809:17;865:4;861:2;851:19;935:2;923:10;919:19;916:1;912:27;906:4;902:38;971:4;959:10;956:20;953:47;;;-1:-1:-1;994:4:11;953:47;1049:2;1044:3;1040:12;1037:1;1033:20;1027:4;1023:31;1013:41;;1104:82;1122:2;1115:5;1112:13;1104:82;;;1167:17;;;1148:1;1137:13;1104:82;;;1108:3;;;748:448;657:545;;;:::o;1378:1352::-;1498:10;;-1:-1:-1;;;;;1520:30:11;;1517:56;;;1553:18;;:::i;:::-;1582:97;1672:6;1632:38;1664:4;1658:11;1632:38;:::i;:::-;1626:4;1582:97;:::i;:::-;1734:4;;1798:2;1787:14;;1815:1;1810:663;;;;2517:1;2534:6;2531:89;;;-1:-1:-1;2586:19:11;;;2580:26;2531:89;-1:-1:-1;;1335:1:11;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;2633:81;;1780:944;;1810:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1846:20:11;;;1964:236;1978:7;1975:1;1972:14;1964:236;;;2067:19;;;2061:26;2046:42;;2159:27;;;;2127:1;2115:14;;;;1994:19;;1964:236;;;1968:3;2228:6;2219:7;2216:19;2213:201;;;2289:19;;;2283:26;-1:-1:-1;;2372:1:11;2368:14;;;2384:3;2364:24;2360:37;2356:42;2341:58;2326:74;;2213:201;-1:-1:-1;;;;;2460:1:11;2444:14;;;2440:22;2427:36;;-1:-1:-1;1378:1352:11:o;:::-;208:2463:9;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106101145760003560e01c806370a08231116100a0578063a9059cbb11610064578063a9059cbb1461034c578063b1275f9a1461036c578063c42b42a01461037f578063dd62ed3e14610395578063f71d96cb146103b557600080fd5b806370a082311461028957806386e34bc1146102bf57806395d89b41146102df578063a2fb1175146102f4578063a457c2d71461032c57600080fd5b8063297f407b116100e7578063297f407b146101b3578063313ce56714610222578063395093511461023e57806349a2aaca1461025e57806363bd1d4a1461027457600080fd5b806306fdde0314610119578063095ea7b31461014457806318160ddd1461017457806323b872dd14610193575b600080fd5b34801561012557600080fd5b5061012e6103d5565b60405161013b9190610a3a565b60405180910390f35b34801561015057600080fd5b5061016461015f366004610a9d565b610467565b604051901515815260200161013b565b34801561018057600080fd5b506002545b60405190815260200161013b565b34801561019f57600080fd5b506101646101ae366004610ac9565b610481565b3480156101bf57600080fd5b506102206101ce366004610b0a565b600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0392909216919091179055565b005b34801561022e57600080fd5b506040516012815260200161013b565b34801561024a57600080fd5b50610164610259366004610a9d565b6104a5565b34801561026a57600080fd5b5061018560065481565b34801561028057600080fd5b506102206104c7565b34801561029557600080fd5b506101856102a4366004610b0a565b6001600160a01b031660009081526020819052604090205490565b3480156102cb57600080fd5b506102206102da366004610b2e565b6104f0565b3480156102eb57600080fd5b5061012e610556565b34801561030057600080fd5b5061031461030f366004610b2e565b610565565b6040516001600160a01b03909116815260200161013b565b34801561033857600080fd5b50610164610347366004610a9d565b61058f565b34801561035857600080fd5b50610164610367366004610a9d565b61060f565b61022061037a366004610b0a565b61061d565b34801561038b57600080fd5b5061018560055481565b3480156103a157600080fd5b506101856103b0366004610b47565b6106bd565b3480156103c157600080fd5b506103146103d0366004610b2e565b6106e8565b6060600380546103e490610b80565b80601f016020809104026020016040519081016040528092919081815260200182805461041090610b80565b801561045d5780601f106104325761010080835404028352916020019161045d565b820191906000526020600020905b81548152906001019060200180831161044057829003601f168201915b5050505050905090565b6000336104758185856106f8565b60019150505b92915050565b60003361048f85828561081c565b61049a858585610896565b506001949350505050565b6000336104758185856104b883836106bd565b6104c29190610bd0565b6106f8565b476064036104ee576008546000906104e190606490610be3565b90506104ec816104f0565b505b565b60005b6008548111610552576008818154811061050f5761050f610c05565b60009182526020822001546040516001600160a01b039091169184156108fc02918591818181858888f1935050505050808061054a90610c1b565b9150506104f3565b5050565b6060600480546103e490610b80565b6008818154811061057557600080fd5b6000918252602090912001546001600160a01b0316905081565b6000338161059d82866106bd565b9050838110156106025760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61049a82868684036106f8565b600033610475818585610896565b3460010361067157600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0383161790555b6006805490600061068183610c1b565b919050555060c860065411156104ec576040517fd8e8545d90a0fc949f9fa79975953750d664b3eb37074e23a481d15736e7727a90600090a150565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6007818154811061057557600080fd5b6001600160a01b03831661075a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105f9565b6001600160a01b0382166107bb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105f9565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061082884846106bd565b9050600019811461089057818110156108835760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105f9565b61089084848484036106f8565b50505050565b6001600160a01b0383166108fa5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105f9565b6001600160a01b03821661095c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105f9565b6001600160a01b038316600090815260208190526040902054818110156109d45760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105f9565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610890565b600060208083528351808285015260005b81811015610a6757858101830151858201604001528201610a4b565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146104ec57600080fd5b60008060408385031215610ab057600080fd5b8235610abb81610a88565b946020939093013593505050565b600080600060608486031215610ade57600080fd5b8335610ae981610a88565b92506020840135610af981610a88565b929592945050506040919091013590565b600060208284031215610b1c57600080fd5b8135610b2781610a88565b9392505050565b600060208284031215610b4057600080fd5b5035919050565b60008060408385031215610b5a57600080fd5b8235610b6581610a88565b91506020830135610b7581610a88565b809150509250929050565b600181811c90821680610b9457607f821691505b602082108103610bb457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561047b5761047b610bba565b600082610c0057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060018201610c2d57610c2d610bba565b506001019056fea2646970667358221220d8847eede194a08e903933204da503e6d30252285fcd1b01ba4be6c086c723a864736f6c63430008110033",
    "sourceMap": "208:2463:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98:1;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;;;;;-1:-1:-1;4431:197:1;;;;;:::i;:::-;;:::i;:::-;;;1188:14:11;;1181:22;1163:41;;1151:2;1136:18;4431:197:1;1023:187:11;3242:106:1;;;;;;;;;;-1:-1:-1;3329:12:1;;3242:106;;;1361:25:11;;;1349:2;1334:18;3242:106:1;1215:177:11;5190:286:1;;;;;;;;;;-1:-1:-1;5190:286:1;;;;;:::i;:::-;;:::i;1351:89:9:-;;;;;;;;;;-1:-1:-1;1351:89:9;;;;;:::i;:::-;1412:7;:21;;;;;;;-1:-1:-1;1412:21:9;;;;;;;;-1:-1:-1;;;;;;1412:21:9;-1:-1:-1;;;;;1412:21:9;;;;;;;;;;1351:89;;;3091:91:1;;;;;;;;;;-1:-1:-1;3091:91:1;;3173:2;2260:36:11;;2248:2;2233:18;3091:91:1;2118:184:11;5871:234:1;;;;;;;;;;-1:-1:-1;5871:234:1;;;;;:::i;:::-;;:::i;324:28:9:-;;;;;;;;;;;;;;;;1618:439;;;;;;;;;;;;;:::i;3406:125:1:-;;;;;;;;;;-1:-1:-1;3406:125:1;;;;;:::i;:::-;-1:-1:-1;;;;;3506:18:1;3480:7;3506:18;;;;;;;;;;;;3406:125;2213:349:9;;;;;;;;;;-1:-1:-1;2213:349:9;;;;;:::i;:::-;;:::i;2365:102:1:-;;;;;;;;;;;;;:::i;469:32:9:-;;;;;;;;;;-1:-1:-1;469:32:9;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;2924:32:11;;;2906:51;;2894:2;2879:18;469:32:9;2744:219:11;6592:427:1;;;;;;;;;;-1:-1:-1;6592:427:1;;;;;:::i;:::-;;:::i;3727:189::-;;;;;;;;;;-1:-1:-1;3727:189:1;;;;;:::i;:::-;;:::i;580:546:9:-;;;;;;:::i;:::-;;:::i;291:27::-;;;;;;;;;;;;;;;;3974:149:1;;;;;;;;;;-1:-1:-1;3974:149:1;;;;;:::i;:::-;;:::i;431:32:9:-;;;;;;;;;;-1:-1:-1;431:32:9;;;;;:::i;:::-;;:::i;2154:98:1:-;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;719:10:4;4568:32:1;719:10:4;4584:7:1;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;;:::o;5190:286::-;5317:4;719:10:4;5373:38:1;5389:4;719:10:4;5404:6:1;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;-1:-1:-1;5465:4:1;;5190:286;-1:-1:-1;;;;5190:286:1:o;5871:234::-;5959:4;719:10:4;6013:64:1;719:10:4;6029:7:1;6066:10;6038:25;719:10:4;6029:7:1;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;1618:439:9:-;1714:21;1739:3;1714:28;1710:341;;1983:7;:14;1961:19;;1983:20;;2000:3;;1983:20;:::i;:::-;1961:42;;2017:23;2028:11;2017:10;:23::i;:::-;1744:307;1710:341;1618:439::o;2213:349::-;2466:9;2461:95;2486:7;:14;2481:19;;2461:95;;2521:7;2529:1;2521:10;;;;;;;;:::i;:::-;;;;;;;;;;:24;;-1:-1:-1;;;;;2521:10:9;;;;:24;;;;;2537:7;;2521:24;:10;:24;2537:7;2521:10;:24;;;;;;;;2502:3;;;;;:::i;:::-;;;;2461:95;;;;2213:349;:::o;2365:102:1:-;2421:13;2453:7;2446:14;;;;;:::i;469:32:9:-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;469:32:9;;-1:-1:-1;469:32:9;:::o;6592:427:1:-;6685:4;719:10:4;6685:4:1;6766:25;719:10:4;6783:7:1;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;-1:-1:-1;;;6801:85:1;;4704:2:11;6801:85:1;;;4686:21:11;4743:2;4723:18;;;4716:30;4782:34;4762:18;;;4755:62;-1:-1:-1;;;4833:18:11;;;4826:35;4878:19;;6801:85:1;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;3727:189::-;3806:4;719:10:4;3860:28:1;719:10:4;3877:2:1;3881:6;3860:9;:28::i;580:546:9:-;871:9;884:1;871:14;867:66;;901:7;:21;;;;;;;-1:-1:-1;901:21:9;;;;;;;;-1:-1:-1;;;;;;901:21:9;-1:-1:-1;;;;;901:21:9;;;;;867:66;942:13;:15;;;:13;:15;;;:::i;:::-;;;;;;1072:3;1056:13;;:19;1052:68;;;1096:13;;;;;;;580:546;:::o;3974:149:1:-;-1:-1:-1;;;;;4089:18:1;;;4063:7;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3974:149::o;431:32:9:-;;;;;;;;;;;;10504:370:1;-1:-1:-1;;;;;10635:19:1;;10627:68;;;;-1:-1:-1;;;10627:68:1;;5110:2:11;10627:68:1;;;5092:21:11;5149:2;5129:18;;;5122:30;5188:34;5168:18;;;5161:62;-1:-1:-1;;;5239:18:11;;;5232:34;5283:19;;10627:68:1;4908:400:11;10627:68:1;-1:-1:-1;;;;;10713:21:1;;10705:68;;;;-1:-1:-1;;;10705:68:1;;5515:2:11;10705:68:1;;;5497:21:11;5554:2;5534:18;;;5527:30;5593:34;5573:18;;;5566:62;-1:-1:-1;;;5644:18:11;;;5637:32;5686:19;;10705:68:1;5313:398:11;10705:68:1;-1:-1:-1;;;;;10784:18:1;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10835:32;;1361:25:11;;;10835:32:1;;1334:18:11;10835:32:1;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;-1:-1:-1;;11351:16:1;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;-1:-1:-1;;;11404:68:1;;5918:2:11;11404:68:1;;;5900:21:11;5957:2;5937:18;;;5930:30;5996:31;5976:18;;;5969:59;6045:18;;11404:68:1;5716:353:11;11404:68:1;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11275:321;11155:441;;;:::o;7473:818::-;-1:-1:-1;;;;;7599:18:1;;7591:68;;;;-1:-1:-1;;;7591:68:1;;6276:2:11;7591:68:1;;;6258:21:11;6315:2;6295:18;;;6288:30;6354:34;6334:18;;;6327:62;-1:-1:-1;;;6405:18:11;;;6398:35;6450:19;;7591:68:1;6074:401:11;7591:68:1;-1:-1:-1;;;;;7677:16:1;;7669:64;;;;-1:-1:-1;;;7669:64:1;;6682:2:11;7669:64:1;;;6664:21:11;6721:2;6701:18;;;6694:30;6760:34;6740:18;;;6733:62;-1:-1:-1;;;6811:18:11;;;6804:33;6854:19;;7669:64:1;6480:399:11;7669:64:1;-1:-1:-1;;;;;7815:15:1;;7793:19;7815:15;;;;;;;;;;;7848:21;;;;7840:72;;;;-1:-1:-1;;;7840:72:1;;7086:2:11;7840:72:1;;;7068:21:11;7125:2;7105:18;;;7098:30;7164:34;7144:18;;;7137:62;-1:-1:-1;;;7215:18:11;;;7208:36;7261:19;;7840:72:1;6884:402:11;7840:72:1;-1:-1:-1;;;;;7946:15:1;;;:9;:15;;;;;;;;;;;7964:20;;;7946:38;;8161:13;;;;;;;;;;:23;;;;;;8210:26;;1361:25:11;;;8161:13:1;;8210:26;;1334:18:11;8210:26:1;;;;;;;8247:37;12180:121;14:548:11;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:131::-;-1:-1:-1;;;;;642:31:11;;632:42;;622:70;;688:1;685;678:12;703:315;771:6;779;832:2;820:9;811:7;807:23;803:32;800:52;;;848:1;845;838:12;800:52;887:9;874:23;906:31;931:5;906:31;:::i;:::-;956:5;1008:2;993:18;;;;980:32;;-1:-1:-1;;;703:315:11:o;1397:456::-;1474:6;1482;1490;1543:2;1531:9;1522:7;1518:23;1514:32;1511:52;;;1559:1;1556;1549:12;1511:52;1598:9;1585:23;1617:31;1642:5;1617:31;:::i;:::-;1667:5;-1:-1:-1;1724:2:11;1709:18;;1696:32;1737:33;1696:32;1737:33;:::i;:::-;1397:456;;1789:7;;-1:-1:-1;;;1843:2:11;1828:18;;;;1815:32;;1397:456::o;1858:255::-;1925:6;1978:2;1966:9;1957:7;1953:23;1949:32;1946:52;;;1994:1;1991;1984:12;1946:52;2033:9;2020:23;2052:31;2077:5;2052:31;:::i;:::-;2102:5;1858:255;-1:-1:-1;;;1858:255:11:o;2559:180::-;2618:6;2671:2;2659:9;2650:7;2646:23;2642:32;2639:52;;;2687:1;2684;2677:12;2639:52;-1:-1:-1;2710:23:11;;2559:180;-1:-1:-1;2559:180:11:o;2968:388::-;3036:6;3044;3097:2;3085:9;3076:7;3072:23;3068:32;3065:52;;;3113:1;3110;3103:12;3065:52;3152:9;3139:23;3171:31;3196:5;3171:31;:::i;:::-;3221:5;-1:-1:-1;3278:2:11;3263:18;;3250:32;3291:33;3250:32;3291:33;:::i;:::-;3343:7;3333:17;;;2968:388;;;;;:::o;3361:380::-;3440:1;3436:12;;;;3483;;;3504:61;;3558:4;3550:6;3546:17;3536:27;;3504:61;3611:2;3603:6;3600:14;3580:18;3577:38;3574:161;;3657:10;3652:3;3648:20;3645:1;3638:31;3692:4;3689:1;3682:15;3720:4;3717:1;3710:15;3574:161;;3361:380;;;:::o;3746:127::-;3807:10;3802:3;3798:20;3795:1;3788:31;3838:4;3835:1;3828:15;3862:4;3859:1;3852:15;3878:125;3943:9;;;3964:10;;;3961:36;;;3977:18;;:::i;4008:217::-;4048:1;4074;4064:132;;4118:10;4113:3;4109:20;4106:1;4099:31;4153:4;4150:1;4143:15;4181:4;4178:1;4171:15;4064:132;-1:-1:-1;4210:9:11;;4008:217::o;4230:127::-;4291:10;4286:3;4282:20;4279:1;4272:31;4322:4;4319:1;4312:15;4346:4;4343:1;4336:15;4362:135;4401:3;4422:17;;;4419:43;;4442:18;;:::i;:::-;-1:-1:-1;4489:1:11;4478:13;;4362:135::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "addPlayer(address)": "b1275f9a",
    "addWinner(address)": "297f407b",
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "currentPrize()": "c42b42a0",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "increaseAllowance(address,uint256)": "39509351",
    "name()": "06fdde03",
    "numberPlayers()": "49a2aaca",
    "payWinners(uint256)": "86e34bc1",
    "payout()": "63bd1d4a",
    "players(uint256)": "f71d96cb",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd",
    "winners(uint256)": "a2fb1175"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"startPayout\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"addPlayer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"addWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addWinner(address)\":{\"details\":\"Instead of storing all winners to an array, it would be cheaper to read using a mapping(uint => address) or better yet, use the players array again to save on storage cost. \"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"payWinners(uint256)\":{\"details\":\"Consider adding an access restriction here, anyone can call payWinner atmYou will want this function payable to send ether\"},\"payout()\":{\"details\":\"Consider limiting access to this function. Anyone with an ether balance of over 100 ether  would be able to call this function.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"currentPrize\":{\"details\":\"currentPrize is not used anywhere\"},\"players\":{\"details\":\"consider using mappings and removing winners to save on gas\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Since we are auditing this, I am adding my additions as notes in this contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BootcampHW22.sol\":\"DogCoinGame\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/=lib/chainlink/contracts/src/v0.8/\",\":@forge-std/=lib/forge-std/src/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":@uniswap/=lib/v3-core/\",\":base64-sol/=lib/base64/\",\":base64/=lib/base64/\",\":chainlink/=lib/chainlink/contracts/src/v0.8/dev/vendor/@arbitrum/nitro-contracts/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":solmate/=lib/solmate/src/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d\",\"dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"src/BootcampHW22.sol\":{\"keccak256\":\"0xe2b55963a817d3f54d1339cc7909c49e0918f7930e50cbb6f5f68001a9685355\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a8f68ca2bdf21fb87f9c9c80c13e1fccff2eb1fe127ae67aa6376567784d5972\",\"dweb:/ipfs/QmRKq4kWbxthUSPjwZweqtkR8zjjrXoQ3gz99sgaR7ZWNT\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "startPayout",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address payable",
              "name": "_player",
              "type": "address"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "addPlayer"
        },
        {
          "inputs": [
            {
              "internalType": "address payable",
              "name": "_winner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addWinner"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "currentPrize",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "numberPlayers",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payWinners"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payout"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "players",
          "outputs": [
            {
              "internalType": "address payable",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "winners",
          "outputs": [
            {
              "internalType": "address payable",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addWinner(address)": {
            "details": "Instead of storing all winners to an array, it would be cheaper to read using a mapping(uint => address) or better yet, use the players array again to save on storage cost. "
          },
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "payWinners(uint256)": {
            "details": "Consider adding an access restriction here, anyone can call payWinner atmYou will want this function payable to send ether"
          },
          "payout()": {
            "details": "Consider limiting access to this function. Anyone with an ether balance of over 100 ether  would be able to call this function."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@chainlink/=lib/chainlink/contracts/src/v0.8/",
        ":@forge-std/=lib/forge-std/src/",
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":@uniswap/=lib/v3-core/",
        ":base64-sol/=lib/base64/",
        ":base64/=lib/base64/",
        ":chainlink/=lib/chainlink/contracts/src/v0.8/dev/vendor/@arbitrum/nitro-contracts/src/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":solmate/=lib/solmate/src/",
        ":v3-core/=lib/v3-core/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/BootcampHW22.sol": "DogCoinGame"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        "keccak256": "0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d",
        "urls": [
          "bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d",
          "dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
        "urls": [
          "bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
          "dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "src/BootcampHW22.sol": {
        "keccak256": "0xe2b55963a817d3f54d1339cc7909c49e0918f7930e50cbb6f5f68001a9685355",
        "urls": [
          "bzz-raw://a8f68ca2bdf21fb87f9c9c80c13e1fccff2eb1fe127ae67aa6376567784d5972",
          "dweb:/ipfs/QmRKq4kWbxthUSPjwZweqtkR8zjjrXoQ3gz99sgaR7ZWNT"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/BootcampHW22.sol",
    "id": 2398,
    "exportedSymbols": {
      "Context": [
        819
      ],
      "DogCoinGame": [
        2397
      ],
      "ERC20": [
        694
      ],
      "IERC20": [
        772
      ],
      "IERC20Metadata": [
        797
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:2639:9",
    "nodes": [
      {
        "id": 2275,
        "nodeType": "PragmaDirective",
        "src": "32:23:9",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ]
      },
      {
        "id": 2276,
        "nodeType": "ImportDirective",
        "src": "56:55:9",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2398,
        "sourceUnit": 695,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2397,
        "nodeType": "ContractDefinition",
        "src": "208:2463:9",
        "nodes": [
          {
            "id": 2282,
            "nodeType": "VariableDeclaration",
            "src": "291:27:9",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 2280,
              "nodeType": "StructuredDocumentation",
              "src": "244:42:9",
              "text": "@dev currentPrize is not used anywhere"
            },
            "functionSelector": "c42b42a0",
            "mutability": "mutable",
            "name": "currentPrize",
            "nameLocation": "306:12:9",
            "scope": 2397,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2281,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "291:7:9",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "id": 2284,
            "nodeType": "VariableDeclaration",
            "src": "324:28:9",
            "nodes": [],
            "constant": false,
            "functionSelector": "49a2aaca",
            "mutability": "mutable",
            "name": "numberPlayers",
            "nameLocation": "339:13:9",
            "scope": 2397,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2283,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "324:7:9",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "id": 2288,
            "nodeType": "VariableDeclaration",
            "src": "431:32:9",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 2285,
              "nodeType": "StructuredDocumentation",
              "src": "358:68:9",
              "text": "@dev consider using mappings and removing winners to save on gas"
            },
            "functionSelector": "f71d96cb",
            "mutability": "mutable",
            "name": "players",
            "nameLocation": "456:7:9",
            "scope": 2397,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
              "typeString": "address payable[]"
            },
            "typeName": {
              "baseType": {
                "id": 2286,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "431:15:9",
                "stateMutability": "payable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address_payable",
                  "typeString": "address payable"
                }
              },
              "id": 2287,
              "nodeType": "ArrayTypeName",
              "src": "431:17:9",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                "typeString": "address payable[]"
              }
            },
            "visibility": "public"
          },
          {
            "id": 2291,
            "nodeType": "VariableDeclaration",
            "src": "469:32:9",
            "nodes": [],
            "constant": false,
            "functionSelector": "a2fb1175",
            "mutability": "mutable",
            "name": "winners",
            "nameLocation": "494:7:9",
            "scope": 2397,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
              "typeString": "address payable[]"
            },
            "typeName": {
              "baseType": {
                "id": 2289,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "469:15:9",
                "stateMutability": "payable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address_payable",
                  "typeString": "address payable"
                }
              },
              "id": 2290,
              "nodeType": "ArrayTypeName",
              "src": "469:17:9",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                "typeString": "address payable[]"
              }
            },
            "visibility": "public"
          },
          {
            "id": 2293,
            "nodeType": "EventDefinition",
            "src": "508:20:9",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "d8e8545d90a0fc949f9fa79975953750d664b3eb37074e23a481d15736e7727a",
            "name": "startPayout",
            "nameLocation": "514:11:9",
            "parameters": {
              "id": 2292,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "525:2:9"
            }
          },
          {
            "id": 2301,
            "nodeType": "FunctionDefinition",
            "src": "534:40:9",
            "nodes": [],
            "body": {
              "id": 2300,
              "nodeType": "Block",
              "src": "572:2:9",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "446f67436f696e",
                    "id": 2296,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "554:9:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_d7c520a8a5539511235b08745d8fe2a3a44986d0a46a0c559b13be3196ab57f3",
                      "typeString": "literal_string \"DogCoin\""
                    },
                    "value": "DogCoin"
                  },
                  {
                    "hexValue": "444f47",
                    "id": 2297,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "565:5:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_b5b35d1f7dc7cf1448a70456de4980702e1fdae4e057d31003c0e1e4b3c4bde2",
                      "typeString": "literal_string \"DOG\""
                    },
                    "value": "DOG"
                  }
                ],
                "id": 2298,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 2295,
                  "name": "ERC20",
                  "nameLocations": [
                    "548:5:9"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 694,
                  "src": "548:5:9"
                },
                "nodeType": "ModifierInvocation",
                "src": "548:23:9"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 2294,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "545:2:9"
            },
            "returnParameters": {
              "id": 2299,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "572:0:9"
            },
            "scope": 2397,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 2330,
            "nodeType": "FunctionDefinition",
            "src": "580:546:9",
            "nodes": [],
            "body": {
              "id": 2329,
              "nodeType": "Block",
              "src": "639:487:9",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2309,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2306,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "871:3:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 2307,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "875:5:9",
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "src": "871:9:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "31",
                      "id": 2308,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "884:1:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "871:14:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": "@dev It stated that the intent is to require 1 ether to be input\nhowever 1 here refers to 1 wei. It costs 1 wei to play atm, \nuse 1 x 10^18 or specify 1 ether",
                  "id": 2317,
                  "nodeType": "IfStatement",
                  "src": "867:66:9",
                  "trueBody": {
                    "id": 2316,
                    "nodeType": "Block",
                    "src": "887:46:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2313,
                              "name": "_player",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2303,
                              "src": "914:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "expression": {
                              "id": 2310,
                              "name": "players",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2288,
                              "src": "901:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                "typeString": "address payable[] storage ref"
                              }
                            },
                            "id": 2312,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "909:4:9",
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "901:12:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$bound_to$_t_array$_t_address_payable_$dyn_storage_ptr_$",
                              "typeString": "function (address payable[] storage pointer,address payable)"
                            }
                          },
                          "id": 2314,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "901:21:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2315,
                        "nodeType": "ExpressionStatement",
                        "src": "901:21:9"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 2319,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "942:15:9",
                    "subExpression": {
                      "id": 2318,
                      "name": "numberPlayers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2284,
                      "src": "942:13:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2320,
                  "nodeType": "ExpressionStatement",
                  "src": "942:15:9"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2321,
                      "name": "numberPlayers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2284,
                      "src": "1056:13:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "323030",
                      "id": 2322,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1072:3:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_200_by_1",
                        "typeString": "int_const 200"
                      },
                      "value": "200"
                    },
                    "src": "1056:19:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": "@dev This requires 201 players to begin execution, not 200.",
                  "id": 2328,
                  "nodeType": "IfStatement",
                  "src": "1052:68:9",
                  "trueBody": {
                    "id": 2327,
                    "nodeType": "Block",
                    "src": "1077:43:9",
                    "statements": [
                      {
                        "eventCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 2324,
                            "name": "startPayout",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2293,
                            "src": "1096:11:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 2325,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1096:13:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2326,
                        "nodeType": "EmitStatement",
                        "src": "1091:18:9"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "b1275f9a",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addPlayer",
            "nameLocation": "589:9:9",
            "parameters": {
              "id": 2304,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2303,
                  "mutability": "mutable",
                  "name": "_player",
                  "nameLocation": "615:7:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 2330,
                  "src": "599:23:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 2302,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "599:15:9",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "598:25:9"
            },
            "returnParameters": {
              "id": 2305,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "639:0:9"
            },
            "scope": 2397,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 2343,
            "nodeType": "FunctionDefinition",
            "src": "1351:89:9",
            "nodes": [],
            "body": {
              "id": 2342,
              "nodeType": "Block",
              "src": "1402:38:9",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2339,
                        "name": "_winner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2333,
                        "src": "1425:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 2336,
                        "name": "winners",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2291,
                        "src": "1412:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                          "typeString": "address payable[] storage ref"
                        }
                      },
                      "id": 2338,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1420:4:9",
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "1412:12:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$bound_to$_t_array$_t_address_payable_$dyn_storage_ptr_$",
                        "typeString": "function (address payable[] storage pointer,address payable)"
                      }
                    },
                    "id": 2340,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1412:21:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2341,
                  "nodeType": "ExpressionStatement",
                  "src": "1412:21:9"
                }
              ]
            },
            "documentation": {
              "id": 2331,
              "nodeType": "StructuredDocumentation",
              "src": "1132:214:9",
              "text": "@dev Instead of storing all winners to an array, it would be\ncheaper to read using a mapping(uint => address) or better\nyet, use the players array again to save on storage cost. "
            },
            "functionSelector": "297f407b",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addWinner",
            "nameLocation": "1360:9:9",
            "parameters": {
              "id": 2334,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2333,
                  "mutability": "mutable",
                  "name": "_winner",
                  "nameLocation": "1386:7:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 2343,
                  "src": "1370:23:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 2332,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1370:15:9",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1369:25:9"
            },
            "returnParameters": {
              "id": 2335,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1402:0:9"
            },
            "scope": 2397,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 2369,
            "nodeType": "FunctionDefinition",
            "src": "1618:439:9",
            "nodes": [],
            "body": {
              "id": 2368,
              "nodeType": "Block",
              "src": "1643:414:9",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2353,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "arguments": [
                          {
                            "id": 2349,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "1722:4:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_DogCoinGame_$2397",
                              "typeString": "contract DogCoinGame"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_DogCoinGame_$2397",
                              "typeString": "contract DogCoinGame"
                            }
                          ],
                          "id": 2348,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1714:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 2347,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1714:7:9",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 2350,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1714:13:9",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 2351,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1728:7:9",
                      "memberName": "balance",
                      "nodeType": "MemberAccess",
                      "src": "1714:21:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "313030",
                      "id": 2352,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1739:3:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_100_by_1",
                        "typeString": "int_const 100"
                      },
                      "value": "100"
                    },
                    "src": "1714:28:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": "@dev same note as above, denote as 100 ether",
                  "id": 2367,
                  "nodeType": "IfStatement",
                  "src": "1710:341:9",
                  "trueBody": {
                    "id": 2366,
                    "nodeType": "Block",
                    "src": "1744:307:9",
                    "statements": [
                      {
                        "assignments": [
                          2356
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2356,
                            "mutability": "mutable",
                            "name": "amountToPay",
                            "nameLocation": "1969:11:9",
                            "nodeType": "VariableDeclaration",
                            "scope": 2366,
                            "src": "1961:19:9",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2355,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1961:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "documentation": "@dev Since there are 100 winner selected, consider that \nthe amount paid back will be the same as the amount\nsent in. 100 / 100 = 1",
                        "id": 2361,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2360,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 2357,
                              "name": "winners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2291,
                              "src": "1983:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                "typeString": "address payable[] storage ref"
                              }
                            },
                            "id": 2358,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1991:6:9",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "1983:14:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "hexValue": "313030",
                            "id": 2359,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2000:3:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_100_by_1",
                              "typeString": "int_const 100"
                            },
                            "value": "100"
                          },
                          "src": "1983:20:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1961:42:9"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2363,
                              "name": "amountToPay",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2356,
                              "src": "2028:11:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2362,
                            "name": "payWinners",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2396,
                            "src": "2017:10:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 2364,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2017:23:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2365,
                        "nodeType": "ExpressionStatement",
                        "src": "2017:23:9"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 2344,
              "nodeType": "StructuredDocumentation",
              "src": "1446:167:9",
              "text": "@dev Consider limiting access to this function.\nAnyone with an ether balance of over 100 ether \nwould be able to call this function."
            },
            "functionSelector": "63bd1d4a",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "payout",
            "nameLocation": "1627:6:9",
            "parameters": {
              "id": 2345,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1633:2:9"
            },
            "returnParameters": {
              "id": 2346,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1643:0:9"
            },
            "scope": 2397,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 2396,
            "nodeType": "FunctionDefinition",
            "src": "2213:349:9",
            "nodes": [],
            "body": {
              "id": 2395,
              "nodeType": "Block",
              "src": "2257:305:9",
              "nodes": [],
              "statements": [
                {
                  "body": {
                    "id": 2393,
                    "nodeType": "Block",
                    "src": "2507:49:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2390,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2372,
                              "src": "2537:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "baseExpression": {
                                "id": 2386,
                                "name": "winners",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2291,
                                "src": "2521:7:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                  "typeString": "address payable[] storage ref"
                                }
                              },
                              "id": 2388,
                              "indexExpression": {
                                "id": 2387,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2376,
                                "src": "2529:1:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2521:10:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "id": 2389,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2532:4:9",
                            "memberName": "send",
                            "nodeType": "MemberAccess",
                            "src": "2521:15:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_send_nonpayable$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (uint256) returns (bool)"
                            }
                          },
                          "id": 2391,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2521:24:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2392,
                        "nodeType": "ExpressionStatement",
                        "src": "2521:24:9"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2382,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2379,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2376,
                      "src": "2481:1:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<=",
                    "rightExpression": {
                      "expression": {
                        "id": 2380,
                        "name": "winners",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2291,
                        "src": "2486:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                          "typeString": "address payable[] storage ref"
                        }
                      },
                      "id": 2381,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2494:6:9",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "2486:14:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2481:19:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": "@dev Consider using transfer instead of send, refer to:\nhttps://docs.soliditylang.org/en/v0.8.17/units-and-global-variables.html#members-of-address-types",
                  "id": 2394,
                  "initializationExpression": {
                    "assignments": [
                      2376
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 2376,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2474:1:9",
                        "nodeType": "VariableDeclaration",
                        "scope": 2394,
                        "src": "2466:9:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2375,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2466:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 2378,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 2377,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2478:1:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2466:13:9"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 2384,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "2502:3:9",
                      "subExpression": {
                        "id": 2383,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2376,
                        "src": "2502:1:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 2385,
                    "nodeType": "ExpressionStatement",
                    "src": "2502:3:9"
                  },
                  "nodeType": "ForStatement",
                  "src": "2461:95:9"
                }
              ]
            },
            "documentation": {
              "id": 2370,
              "nodeType": "StructuredDocumentation",
              "src": "2063:145:9",
              "text": "@dev Consider adding an access restriction here, anyone can call payWinner atm\n @dev You will want this function payable to send ether"
            },
            "functionSelector": "86e34bc1",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "payWinners",
            "nameLocation": "2222:10:9",
            "parameters": {
              "id": 2373,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2372,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "2241:7:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 2396,
                  "src": "2233:15:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2371,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2233:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2232:17:9"
            },
            "returnParameters": {
              "id": 2374,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2257:0:9"
            },
            "scope": 2397,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 2278,
              "name": "ERC20",
              "nameLocations": [
                "232:5:9"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 694,
              "src": "232:5:9"
            },
            "id": 2279,
            "nodeType": "InheritanceSpecifier",
            "src": "232:5:9"
          }
        ],
        "canonicalName": "DogCoinGame",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 2277,
          "nodeType": "StructuredDocumentation",
          "src": "113:94:9",
          "text": "@notice Since we are auditing this, I am adding my additions as notes in this contract"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          2397,
          694,
          797,
          772,
          819
        ],
        "name": "DogCoinGame",
        "nameLocation": "217:11:9",
        "scope": 2398,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 9
}